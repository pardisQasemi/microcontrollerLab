;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;
;#define ICR1 256 * ICR1H + ICR1L;
;
;int timerCounterForOverflow = 0;
;char frequencyChars[100];
;int begin = 0;
;int end = 0;
;int timeLenght = 0;
;long freq;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0011     ++timerCounterForOverflow;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0012     if(timerCounterForOverflow == 100){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0013 
; 0000 0014         TCCR1A = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0015         TCNT1=0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0016         TIFR = (1<<ICF1);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0017         //calculating begin
; 0000 0018         TCCR1B = 0x41;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0019         while ((TIFR&(1<<ICF1)) == 0);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001A         begin = ICR1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001B         TIFR = (1<<ICF1);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001C         //calculating end
; 0000 001D         TCCR1B = 0x41;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001E         while ((TIFR&(1<<ICF1)) == 0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 001F         end = ICR1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0020         TIFR = (1<<ICF1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0021 
; 0000 0022         TCCR1B = 0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0023 
; 0000 0024         if(begin < end)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0025         {
; 0000 0026             lcd_clear();
;PCODE: $00000044 VOL: 0
; 0000 0027             timeLenght = end - begin;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0028             freq= 8000000UL/timeLenght;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0029             sprintf(frequencyChars,"Frequency calculated = %d", (int)freq);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 002A             lcd_puts(frequencyChars);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 002B         }
; 0000 002C         else {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 002D 
; 0000 002E             lcd_puts("calculate");
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 002F 
; 0000 0030         }
;PCODE: $00000060 VOL: 0
; 0000 0031     }
; 0000 0032 
; 0000 0033     TCNT1H=0xFF;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0034     TCNT1L=0xF0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0035 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0

	.DSEG
_0xC:
	.BYTE 0xA
;void main(void)
; 0000 0037 {

	.CSEG
;PCODE: $00000069 VOL: 0
; 0000 0038     lcd_init(20);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0039     DDRA =0xFF;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003A     PORTA = 0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003B 
; 0000 003C DDRD=0b11111111;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 003D PORTD=0b00000000;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 003E 
; 0000 003F // Timer/Counter 1 initialization
; 0000 0040 // Clock source: System Clock
; 0000 0041 // Clock value: 125.000 kHz
; 0000 0042 // Mode: Normal top=0xFFFF
; 0000 0043 // OC1A output: Disconnected
; 0000 0044 // OC1B output: Disconnected
; 0000 0045 // Noise Canceler: Off
; 0000 0046 // Input Capture on Falling Edge
; 0000 0047 // Timer Period: 0.52429 s
; 0000 0048 // Timer1 Overflow Interrupt: On
; 0000 0049 // Input Capture Interrupt: Off
; 0000 004A // Compare A Match Interrupt: Off
; 0000 004B // Compare B Match Interrupt: Off
; 0000 004C 
; 0000 004D TCCR1A=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 004E TCCR1B=0x01;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 004F TCNT1H=0xFF;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0050 TCNT1L=0xF0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0051 
; 0000 0052 
; 0000 0053 // External Interrupt(s) initialization
; 0000 0054 // INT0: Off
; 0000 0055 // INT1: Off
; 0000 0056 // INT2: Off
; 0000 0057 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0058 MCUCSR=(0<<ISC2);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0059 
; 0000 005A 
; 0000 005B // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 005C TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005D 
; 0000 005E #asm("sei")
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 005F 
; 0000 0060 while (1)
;PCODE: $00000084 VOL: 0
; 0000 0061       {}
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0062 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
