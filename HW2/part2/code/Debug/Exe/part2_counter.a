;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;int CTemporary;
;int T0Overflow = 0;
;int T1Overflow = 0;
;int number7seg[4] = {0,0,0,0};
;int iterator = 3;
;int lastNumSS = 3;
;int numbers[10] = {
;	0b00111111 ,
;	0b00000110 ,
;	0b01011011 ,
;	0b01001111 ,
;    0b01100110 ,
;    0b01101101 ,
;    0b01111101 ,
;    0b00000111 ,
;    0b01111111 ,
;    0b01101111
;    };

	.DSEG
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0000 0019 interrupt [10] void timer0_ovf_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001A 
; 0000 001B    ++T0Overflow;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001C 
; 0000 001D     if(T0Overflow ==2){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001E            CTemporary = PORTC ^ 0b11111111;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001F            PORTC = CTemporary ^ 0b11111111;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0020 
; 0000 0021            CTemporary = CTemporary >> 1;
;PCODE: $0000001D VOL: 0
; 0000 0022            if(CTemporary == 0)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0023        {
; 0000 0024                CTemporary = 8;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0025            }
; 0000 0026 
; 0000 0027            CTemporary = CTemporary ^ 0b11111111;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0028            PORTC = CTemporary;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0029 
; 0000 002A        PORTD = numbers[number7seg[lastNumSS]];
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002B            T0Overflow = 0;
;PCODE: $00000032 VOL: 0
; 0000 002C            lastNumSS--;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002D 
; 0000 002E            if(lastNumSS  == -1 )
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 002F       {
; 0000 0030                lastNumSS  = 3;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0031           }
; 0000 0032     }
;PCODE: $0000003B VOL: 0
; 0000 0033        TCNT0 = 0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0034 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void){
; 0000 0036 interrupt [9] void timer1_ovf_isr(void){
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0037 
; 0000 0038     ++T1Overflow;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0039     if(T1Overflow == 300){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003A 
; 0000 003B          number7seg[3]++;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003C 
; 0000 003D          while (iterator >= 0){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003E 
; 0000 003F             if(number7seg[iterator] == 10){
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0040 
; 0000 0041             number7seg[iterator-1]++;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0042             number7seg[iterator] = 0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0043 
; 0000 0044             }
; 0000 0045              iterator--;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0046          }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0047          iterator = 3;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0048          T1Overflow = 0;
;PCODE: $0000006F VOL: 0
; 0000 0049     }
; 0000 004A     TCNT1L = 0xF0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004B     TCNT1H = 0xFF;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 004C }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;
;void main(void){
; 0000 004E void main(void){
;PCODE: $00000078 VOL: 0
; 0000 004F 
; 0000 0050 DDRD = 0b11111111;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0051 PORTD = 0b00000000;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0052 DDRC = 0b11111111;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0053 PORTC = 0b11101111;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0054 // timer inrpt init
; 0000 0055 TIMSK = (0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0056 
; 0000 0057 TCCR0 = (0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0058 TCNT0 = 0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0059 OCR0 = 0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 005A 
; 0000 005B TCCR1A = (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 005C TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 005D TCNT1H = 0xFF;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005E TCNT1L = 0xF0;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 005F //Ext Inrpt init
; 0000 0060 MCUCR = (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0061 MCUCSR = (0<<ISC2);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0062 
; 0000 0063 #asm("sei")
;PCODE: $00000095 VOL: 0
	sei
;PCODE: $00000096 VOL: 0
; 0000 0064 
; 0000 0065 while (1)
;PCODE: $00000097 VOL: 0
; 0000 0066       {}
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0067 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
